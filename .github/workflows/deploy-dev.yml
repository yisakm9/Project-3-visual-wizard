# .github/workflows/deploy-dev.yml

name: 'Terraform CI/CD for Dev'

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  validate_and_plan:
    name: 'Validate, Test, Scan & Plan'
    runs-on: ubuntu-latest
    environment: dev

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TF_WORKING_DIR: 'environments/dev'
      
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials (OIDC)'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::456202167790:role/githubaction #  IAM ROLE ARN
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Terraform-Plan

      - name: 'Set up Python 3.9'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: 'Install Python Test Dependencies'
        run: pip install -r requirements-dev.txt
      
      - name: 'Run Pytest Unit Tests'
        run: pytest test/

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1 # Standardize version

      - name: 'Install TFLint for Terraform Linting'
        uses: terraform-linters/setup-tflint@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tflint_version: latest

      - name: 'Run TFLint'
        run: tflint --recursive
        
      - name: 'Run Trivy for IaC Security Scanning'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          exit-code: '1'
          format: 'table'
          severity: 'HIGH,CRITICAL'

      - name: 'Terraform Init'
        id: init
        run: terraform -chdir="${{ env.TF_WORKING_DIR }}" init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_DEV }}"
      
      - name: 'Terraform Validate'
        run: terraform -chdir="${{ env.TF_WORKING_DIR }}" validate -no-color

      - name: 'Terraform Plan'
        id: plan
        run: terraform -chdir="${{ env.TF_WORKING_DIR }}" plan -no-color -out=tfplan

      - name: 'Create Plan Output for PR Comment'
        if: github.event_name == 'pull_request'
        id: format-plan
        run: |
          PLAN_OUTPUT=$(terraform -chdir="${{ env.TF_WORKING_DIR }}" show -no-color tfplan)
          COMMENT_BODY="#### Terraform Plan for Dev Environment ðŸ“–\`\`\`terraform\n$PLAN_OUTPUT\n\`\`\`"
          echo "comment_body<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # --- THIS IS THE CORRECTED STEP ---
      - name: 'Post Plan to Pull Request'
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          # Pass the complex string as an environment variable
          PLAN_COMMENT: ${{ steps.format-plan.outputs.comment_body }}
        with:
          script: |
            // Read the comment body from the environment variable
            const newBody = process.env.PLAN_COMMENT;

            const { data: comments } = await github.rest.issues.listComments({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number });
            const botComment = comments.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.includes('Terraform Plan for Dev Environment'));

            if (botComment) {
              await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id: botComment.id, body: newBody });
            } else {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body: newBody });
            }

      - name: 'Upload Terraform Plan Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-dev
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          retention-days: 1
          
      - name: 'Upload Source Code Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: source-code-dev
          path: src/
          retention-days: 1

  deploy_to_dev:
    name: 'Deploy to Dev'
    runs-on: ubuntu-latest
    needs: validate_and_plan
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: dev

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TF_WORKING_DIR: 'environments/dev'
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials (OIDC)'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::456202167790:role/githubaction #  IAM ROLE ARN
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Terraform-Apply

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1 # Standardize version
      
      - name: 'Download Terraform Plan Artifact'
        uses: actions/download-artifact@v4
        with:
          name: tfplan-dev
          path: ${{ env.TF_WORKING_DIR }}

      - name: 'Download Source Code Artifact'
        uses: actions/download-artifact@v4
        with:
          name: source-code-dev
          path: src/

      - name: 'Terraform Init'
        run: terraform -chdir="${{ env.TF_WORKING_DIR }}" init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_DEV }}"
        
      - name: 'Terraform Apply'
        run: terraform -chdir="${{ env.TF_WORKING_DIR }}" apply -auto-approve tfplan